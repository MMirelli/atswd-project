<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>it.fi.mirelli</groupId>
	<artifactId>com.project.examsystem</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>com.project.examsystem</name>
	<url>http://maven.apache.org</url>

	<properties>
		<!-- versions -->
		<jacoco-v>0.7.7.201606060606</jacoco-v>
		<surefire-v>2.19.1</surefire-v>
		<compiler-plugin-v>3.7.0</compiler-plugin-v>
		<java-v>1.8</java-v>
		<failsafe-v>2.19.1</failsafe-v>
		<coveralls-v>4.3.0</coveralls-v>
		<junit-v>4.12</junit-v>
		<mockito-v>1.10.19</mockito-v>
		<h2-database-v>1.4.196</h2-database-v>
		<log4j-v>2.10.0</log4j-v>
		<hibernate-v>5.2.13.Final</hibernate-v>
		<mysql-v>6.0.6</mysql-v>
		<fabric8-v>0.24.0</fabric8-v>
		<antrun-v>1.8</antrun-v>

		<sleep.time>5000</sleep.time>

		<jacoco.data.file>${project.build.directory}/coverage-reports/jacoco.exec</jacoco.data.file>
		<jacoco.report.path>${project.reporting.outputDirectory}/jacoco-ut</jacoco.report.path>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>


	<build>
		<plugins>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco-v}</version>
				<executions>
					<!-- Prepares the property pointing to the JaCoCo runtime agent which 
						is passed as VM argument when Maven the Surefire plugin is executed. -->
					<execution>
						<id>pre-unit-test</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<destFile>${jacoco.data.file}</destFile>
						</configuration>
					</execution>
					<!-- Ensures that the code coverage report for unit tests is created 
						after unit tests have been run. -->
					<execution>
						<id>post-unit-test</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<dataFile>${jacoco.data.file}</dataFile>
							<!-- Sets the output directory for the code coverage report. -->
							<outputDirectory>${jacoco.report.path}</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${surefire-v}</version>
			</plugin>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${compiler-plugin-v}</version>
				<configuration>
					<source>${java-v}</source>
					<target>${java-v}</target>
				</configuration>
			</plugin>

		</plugins>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.eluder.coveralls</groupId>
					<artifactId>coveralls-maven-plugin</artifactId>
					<version>${coveralls-v}</version>
					<configuration>
						<jacocoReports>
							<jacocoReport>${jacoco.report.path}/jacoco.xml</jacocoReport>
						</jacocoReports>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<profiles>
		<profile>
			<id>travis-ci-integration</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
				<build>
					<plugins>
						<plugin>
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-failsafe-plugin</artifactId>
							<version>${failsafe-v}</version>
							<executions>
								<execution>
									<goals>
										<goal>integration-test</goal>
										<goal>verify</goal>
									</goals>
								</execution>
							</executions>
						</plugin>
					</plugins>
				</build>
		</profile>

		<profile>
			<id>no-integration-docker-dependent</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<version>${failsafe-v}</version>
						<executions>
							<execution>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
								<configuration>
									<excludes>
										<exclude>EndToEndIT.java</exclude>
										<exclude>SqlDatabaseWrapperIT</exclude>
									</excludes>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>auto-docker-start-up</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<!-- mySql db needs quite a long time to start up, this is to stop 
							the build temporarily -->
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>${antrun-v}</version>
						<executions>
							<execution>
								<id>sleep-for-a-while</id>
								<phase>integration-test</phase>
								<configuration>
									<target>
										<sleep seconds="15" />
									</target>
								</configuration>
								<goals>
									<goal>run</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<version>${failsafe-v}</version>
						<executions>
							<execution>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<version>${fabric8-v}</version>
						<configuration>
							<images>
								<image>
									<name>mysql</name>
									<run>
										<env>
											<MYSQL_USER>root</MYSQL_USER>
											<MYSQL_ROOT_PASSWORD>psw</MYSQL_ROOT_PASSWORD>
											<MYSQL_DATABASE>ExamDB</MYSQL_DATABASE>
										</env>
										<hostname>localhost</hostname>
										<ports>
											<port>3306:3306</port>
										</ports>
									</run>
								</image>
							</images>
							<showLogs>true</showLogs>
						</configuration>
						<executions>
							<execution>
								<id>docker:start</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>start</goal>
								</goals>
							</execution>
							<execution>
								<id>docker:stop</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>stop</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>


	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit-v}</version>
			<scope>test</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.mockito/mockito-all -->
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>${mockito-v}</version>
			<scope>test</scope>
		</dependency>

		<!-- https://mvnrepository.com/artifact/ch.vorburger.mariaDB4j/mariaDB4j -->
		<!-- <dependency> <groupId>ch.vorburger.mariaDB4j</groupId> <artifactId>mariaDB4j</artifactId> 
			<version>2.2.3</version> <scope>test</scope> </dependency> -->

		<!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-core -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>${hibernate-v}</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>${mysql-v}</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>${log4j-v}</version>
		</dependency>

		<!-- In-memory db for unit-testing -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>${h2-database-v}</version>
			<scope>test</scope>
		</dependency>

	</dependencies>
</project>
