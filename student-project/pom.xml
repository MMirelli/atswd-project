<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>it.fi.mirelli</groupId>
	<artifactId>student-project</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>com.project.examsystem</name>
	<url>http://maven.apache.org</url>

	<properties>

		<!-- Versions of plug-ins and dependencies -->
		<jacoco-v>0.7.7.201606060606</jacoco-v>
		<surefire-v>2.19.1</surefire-v>
		<compiler-plugin-v>3.7.0</compiler-plugin-v>
		<java-v>1.8</java-v>
		<failsafe-v>2.19.1</failsafe-v>
		<coveralls-v>4.3.0</coveralls-v>
		<junit-v>4.12</junit-v>
		<mockito-v>1.10.19</mockito-v>
		<h2-database-v>1.4.196</h2-database-v>
		<log4j-v>1.2.17</log4j-v>
		<hibernate-v>5.2.13.Final</hibernate-v>
		<mysql-v>8.0.16</mysql-v>
		<fabric8-v>0.24.0</fabric8-v>
		<antrun-v>1.8</antrun-v>
		<shade-v>3.1.0</shade-v>

		<jacoco.data.file>${project.build.directory}/coverage-reports/jacoco.exec</jacoco.data.file>
		<jacoco.report.path>${project.reporting.outputDirectory}/jacoco-ut</jacoco.report.path>

		<!-- SonarCloud properties -->
		<sonar.language>java</sonar.language>
		<sonar.jacoco.reportPaths>${jacoco.data.file}</sonar.jacoco.reportPaths>
		<sonar.coverage.exclusions>**/*Student_.java,**/*Main.java</sonar.coverage.exclusions>
		<sonar.projectName>student-project</sonar.projectName>

		<!-- Source and output encoding -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
	</properties>


	<build>

		<plugins>

			<!-- Unit test plug-in -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${surefire-v}</version>
			</plugin>

			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${compiler-plugin-v}</version>
				<configuration>
					<source>${java-v}</source>
					<target>${java-v}</target>
				</configuration>
			</plugin>

		</plugins>
	</build>

	<profiles>

		<profile>
			<id>code-analysis</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>

				<pluginManagement>
					<plugins>

						<plugin>
							<groupId>org.eluder.coveralls</groupId>
							<artifactId>coveralls-maven-plugin</artifactId>
							<version>${coveralls-v}</version>
							<configuration>
								<jacocoReports>
									<jacocoReport>${jacoco.report.path}/jacoco.xml</jacocoReport>
								</jacocoReports>
							</configuration>
						</plugin>

					</plugins>
				</pluginManagement>
				
				<plugins>
				
					<plugin>
				
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<version>${jacoco-v}</version>
						<executions>
							<!-- Prepares the property pointing to the JaCoCo runtime agent which 
								is passed as VM argument when Maven the SureFire plug-in is executed. -->
							<execution>
								<id>pre-unit-test</id>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
								<configuration>
									<!-- Sets the path to the file which contains the execution data. -->
									<destFile>${jacoco.data.file}</destFile>
								</configuration>
							</execution>
							<!-- Ensures that the code coverage report for unit tests is created 
								after unit tests have been run. -->
							<execution>
								<id>post-unit-test</id>
								<phase>test</phase>
								<goals>
									<goal>report</goal>
								</goals>
								<configuration>
									<!-- Sets the path to the file which contains the execution data. -->
									<dataFile>${jacoco.data.file}</dataFile>
									<!-- Sets the output directory for the code coverage report. -->
									<outputDirectory>${jacoco.report.path}</outputDirectory>
									<excludes>
										<exclude>it/fi/mirelli/studentproject/main/*</exclude>
										<exclude>**/*Student_.*</exclude>
									</excludes>
								</configuration>
							</execution>
						</executions>
					</plugin>
				
				</plugins>
				
			</build>
		</profile>

		<!-- Useful profile for quick testing the application, as no dockerized 
			DBs are used. This is default. -->
		<profile>
			<id>no-integration-docker-dependent</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>

				<plugins>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<version>${failsafe-v}</version>
						<executions>
							<execution>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
								<configuration>
									<excludes>
										<exclude>EndToEndIT.java</exclude>
										<exclude>SqlDatabaseWrapperIT</exclude>
									</excludes>
								</configuration>
							</execution>
						</executions>
					</plugin>

				</plugins>

			</build>
		</profile>

		<!-- Running this profile all tests (Unit and IT) are executed. Dockerized 
			DB start up and tear down automatically -->
		<profile>
			<id>IT-auto-docker-start-up</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>

				<plugins>

					<!-- MySQL docker DB needs quite a long time to start up; this plugin 
						is activated to stop the build temporarily (15 seconds) -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>${antrun-v}</version>
						<executions>
							<execution>
								<id>sleep-for-a-while</id>
								<!-- integration-test phase has been chosen because docker DB is 
									set up in pre-integration-test phase -->
								<phase>integration-test</phase>
								<configuration>
									<target>
										<sleep seconds="15" />
									</target>
								</configuration>
								<goals>
									<goal>run</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<!-- FailSafe is here set in the way that all IT will be executed -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<version>${failsafe-v}</version>
						<executions>
							<execution>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<!-- Start up and tear down MySQL DB docker -->
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<version>${fabric8-v}</version>
						<configuration>
							<images>
								<image>
									<name>mysql</name>
									<run>
										<env>
											<MYSQL_USER>root</MYSQL_USER>
											<MYSQL_ROOT_PASSWORD>psw</MYSQL_ROOT_PASSWORD>
											<MYSQL_DATABASE>StudentDB</MYSQL_DATABASE>
										</env>
										<hostname>localhost</hostname>
										<ports>
											<!-- Default MySQL DB port (3306) is mapped to 12345 host machine 
												port since Travis-IC has 3306 port consistently busy -->
											<port>12345:3306</port>
										</ports>
									</run>
								</image>
							</images>
							<showLogs>true</showLogs>
						</configuration>
						<executions>
							<execution>
								<id>docker:start</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>start</goal>
								</goals>
							</execution>
							<execution>
								<id>docker:stop</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>stop</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

				</plugins>

			</build>

		</profile>

		<!-- This profile runs the docker-compose file. Student-project main (so-called 
			student-app) will then be executed by openjdk8 of Ubuntu16.04 dockerized 
			OS and communicate with in-docker MySQL DB. -->
		<profile>
			<id>docker-compose-runner</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>

				<plugins>

					<!-- FatJar plug-in: all dependencies are included in the jar -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-shade-plugin</artifactId>
						<version>${shade-v}</version>
						<executions>
							<execution>
								<phase>package</phase>
								<goals>
									<goal>shade</goal>
								</goals>
								<configuration>
									<shadedArtifactAttached>true</shadedArtifactAttached>
									<shadedClassifierName>all</shadedClassifierName>
									<transformers>
										<transformer
											implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
											<mainClass>it.fi.mirelli.studentproject.main.Main</mainClass>
										</transformer>
									</transformers>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<version>${fabric8-v}</version>

						<executions>

							<!-- This execution builds student-app docker image, as it is defined 
								in dockerFileDir/Dockerfile -->
							<execution>
								<id>docker:build</id>
								<phase>package</phase>
								<goals>
									<goal>build</goal>
								</goals>
								<configuration>
									<images>
										<image>
											<name>student-app</name>
											<build>
												<dockerFileDir>${project.basedir}/Docker</dockerFileDir>
												<args>
													<fatjarName>${project.artifactId}-${project.version}-all.jar</fatjarName>
												</args>
												<assembly>
													<inline>
														<files>
															<file>
																<source>${project.build.directory}/${project.artifactId}-${project.version}-all.jar</source>
															</file>
														</files>
													</inline>
												</assembly>
											</build>
										</image>
									</images>
								</configuration>
							</execution>

							<!-- It runs docker-compose, so both student-app image and in-docker 
								MySQL DB are executed and teared down, once finished. -->
							<execution>
								<id>docker:start</id>
								<phase>verify</phase>
								<goals>
									<goal>start</goal>
									<goal>stop</goal>
								</goals>
								<configuration>
									<images>
										<image>
											<alias>app</alias>
											<external>
												<type>compose</type>
												<basedir>.</basedir>
											</external>
											<run>
												<wait>
													<!-- Here we test that student-app terminates as expected by 
														25 seconds -->
													<time>25000</time>
													<log>Student-app terminated</log>
												</wait>
											</run>
										</image>
									</images>
									<showLogs>true</showLogs>
								</configuration>
							</execution>
						</executions>
					</plugin>

				</plugins>

			</build>
		</profile>

		<!-- PitTest profile. It activates all mutators -->
		<profile>
			<id>pit-test-report</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<plugins>

					<plugin>
						<groupId>org.pitest</groupId>
						<artifactId>pitest-maven</artifactId>
						<version>1.3.2</version>
						<configuration>
							<excludedClasses>
								<param>it.fi.mirelli.studentproject.models.Student_*</param>
								<param>it.fi.mirelli.studentproject.main.*</param>
							</excludedClasses>
							<mutators>
								<mutator>ALL</mutator>
							</mutators>
						</configuration>
						<executions>
							<execution>
								<id>pit-mutation</id>
								<goals>
									<goal>mutationCoverage</goal>
								</goals>
								<phase>verify</phase>
							</execution>
						</executions>
					</plugin>

				</plugins>
			</build>
		</profile>
	</profiles>


	<dependencies>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit-v}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>${mockito-v}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>${hibernate-v}</version>
		</dependency>

		<!-- In-memory db for unit-testing -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>${h2-database-v}</version>
			<scope>test</scope>
		</dependency>

		<!-- MySQL DB connector, used for IT -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>${mysql-v}</version>
		</dependency>

		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>${log4j-v}</version>
		</dependency>

	</dependencies>
</project>
